/**
 * Space Horde Survivor - Clase GunshipShip
 * Nave aliada especializada en combate: resistente, letal pero lenta
 * Hereda de AllyShip y sobrescribe propiedades y renderizado
 */

class GunshipShip extends AllyShip {
    /**
     * Constructor del Gunship
     * @param {number} x - Posici√≥n inicial X
     * @param {number} y - Posici√≥n inicial Y 
     * @param {Game} gameInstance - Referencia al objeto Game principal
     */
    constructor(x, y, gameInstance) {
        // Llamar al constructor padre (AllyShip) con configuraci√≥n espec√≠fica de Gunship
        super(x, y, gameInstance, CONFIG.ALLY.GUNSHIP);
        
        console.log(`üî´ GunshipShip creado en (${x.toFixed(1)}, ${y.toFixed(1)}) - HP: ${this.hp}, Da√±o: ${this.damage}`);
    }
    
    /**
     * Renderiza el Gunship con forma triangular distintiva (m√°s ancha y robusta)
     * @param {CanvasRenderingContext2D} ctx - Contexto del canvas
     */
    render(ctx) {
        if (!this.isAlive) return;
        
        ctx.save();
        
        // Trasladar al centro de la nave
        ctx.translate(this.position.x, this.position.y);
        
        // Rotar seg√∫n el √°ngulo de la nave
        ctx.rotate(this.angle);
        
        // === DIBUJAR GUNSHIP: TRI√ÅNGULO ANCHO Y ROBUSTO ===
        
        // Configurar estilo
        ctx.fillStyle = this.color;
        ctx.strokeStyle = '#FFFFFF';
        ctx.lineWidth = 2; // L√≠nea m√°s gruesa para aspecto robusto
        
        // Dibujar tri√°ngulo gunship (m√°s ancho y robusto que el default)
        ctx.beginPath();
        
        // Punta delantera (menos puntiaguda, m√°s robusta)
        ctx.moveTo(0, -this.radius * 1.2);
        
        // Esquinas traseras m√°s anchas
        ctx.lineTo(-this.radius * 0.9, this.radius * 0.7);
        
        // Base trasera m√°s ancha y plana
        ctx.lineTo(-this.radius * 0.5, this.radius * 0.9);
        ctx.lineTo(this.radius * 0.5, this.radius * 0.9);
        
        // Esquina trasera derecha
        ctx.lineTo(this.radius * 0.9, this.radius * 0.7);
        
        // Cerrar en la punta
        ctx.closePath();
        
        // Rellenar y contornear
        ctx.fill();
        ctx.stroke();
        
        // === DETALLES ESPEC√çFICOS DE GUNSHIP ===
        
        // Ca√±ones laterales
        ctx.fillStyle = '#FFAA00';
        ctx.strokeStyle = '#FFFFFF';
        ctx.lineWidth = 1;
        
        // Ca√±√≥n izquierdo
        ctx.beginPath();
        ctx.rect(-this.radius * 0.7, -this.radius * 0.5, this.radius * 0.2, this.radius * 0.8);
        ctx.fill();
        ctx.stroke();
        
        // Ca√±√≥n derecho
        ctx.beginPath();
        ctx.rect(this.radius * 0.5, -this.radius * 0.5, this.radius * 0.2, this.radius * 0.8);
        ctx.fill();
        ctx.stroke();
        
        // L√≠nea central reforzada (blindaje)
        ctx.strokeStyle = '#FFCC00';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(0, -this.radius * 1.0);
        ctx.lineTo(0, this.radius * 0.5);
        ctx.stroke();
        
        // Puntos de armamento (detalles)
        ctx.fillStyle = '#FFCC00';
        ctx.beginPath();
        ctx.arc(-this.radius * 0.6, -this.radius * 0.1, 2, 0, 2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(this.radius * 0.6, -this.radius * 0.1, 2, 0, 2 * Math.PI);
        ctx.fill();
        
        // Reactor trasero (m√°s potente)
        ctx.fillStyle = '#FF4400';
        ctx.beginPath();
        ctx.arc(0, this.radius * 0.8, 3, 0, 2 * Math.PI);
        ctx.fill();
        
        ctx.restore();
        
        // Renderizar barra de vida si est√° da√±ado
        this.renderHealthBar(ctx);
    }
}

console.log("‚úÖ GunshipShip.js cargado correctamente"); 